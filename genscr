        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ("server", "port")
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)

gdbscript = """
init-pwndbg
continue
"""

libc = ELF("./libc.so.6")
ld = ELF("'"$LD_FILE"'")
exe = "./'"$BINARY_NAME"'"
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = "debug"

s = lambda data: io.send(data)
sa = lambda msg, data: io.sendafter(msg, data)
sl = lambda data: io.sendline(data)
sla = lambda msg, data: io.sendlineafter(msg, data)
info = lambda msg: log.info(msg)
recvunt = lambda msg: io.recvuntil(msg)

# ===================EXPLOIT GOES HERE=======================

io = start()

io.interactive()
'

# Generate solve.py file
echo "$PYTHON_TEMPLATE" > solve.py

# Make solve.py executable
chmod +x solve.py

# Open Sublime Text
FILE_WIN_PATH=$(wslpath -w "$(pwd)/solve.py")
"/mnt/c/Program Files/Sublime Text/sublime_text.exe" "$FILE_WIN_PATH" &
